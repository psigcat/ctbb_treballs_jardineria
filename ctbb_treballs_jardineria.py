# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ctbb_treballs_jardineria
								 A QGIS plugin
 Incidencies de CTBB Treballs Jardineria
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
							  -------------------
		begin				: 2024-10-28
		git sha			  : $Format:%H$
		copyright			: (C) 2024 by Gerald Kogler
		email				: geraldo@servus.at
 ***************************************************************************/

/***************************************************************************
 *																		 *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or	 *
 *   (at your option) any later version.								   *
 *																		 *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QComboBox
from qgis.PyQt.QtSql import QSqlTableModel
from qgis.core import Qgis, QgsVectorLayerCache
from qgis.gui import QgsAttributeTableFilterModel, QgsAttributeTableModel

# Import the code for the dialog
from .ctbb_treballs_jardineria_dialog import ctbb_treballs_jardineriaDialog
from .ctbb_database import ctbb_database
import os.path


ARBRES_TABLE_FIELDS = ['id', 'esp_nom', ' id_vu', 'ref_zona']
DICT_TABLES = ['dic_ambit', 'dic_esporga_temporada', 'dic_tipus_esporga', 'dic_tipus_incidencia', 'dic_tipus_plaga']


class ctbb_treballs_jardineria:
	"""QGIS Plugin Implementation."""

	def __init__(self, iface):
		"""Constructor.

		:param iface: An interface instance that will be passed to this class
			which provides the hook by which you can manipulate the QGIS
			application at run time.
		:type iface: QgsInterface
		"""
		# Save reference to the QGIS interface
		self.iface = iface
		# initialize plugin directory
		self.plugin_dir = os.path.dirname(__file__)
		# initialize locale
		locale = QSettings().value('locale/userLocale')[0:2]
		locale_path = os.path.join(
			self.plugin_dir,
			'i18n',
			'ctbb_treballs_jardineria_{}.qm'.format(locale))

		if os.path.exists(locale_path):
			self.translator = QTranslator()
			self.translator.load(locale_path)
			QCoreApplication.installTranslator(self.translator)

		# Declare instance attributes
		self.actions = []
		self.menu = self.tr(u'&CTBB Treballs Jardineria')

		# Check if plugin was started the first time in current QGIS session
		# Must be set in initGui() to survive plugin reloads
		self.first_start = None

	# noinspection PyMethodMayBeStatic
	def tr(self, message):
		"""Get the translation for a string using Qt translation API.

		We implement this ourselves since we do not inherit QObject.

		:param message: String for translation.
		:type message: str, QString

		:returns: Translated version of message.
		:rtype: QString
		"""
		# noinspection PyTypeChecker,PyArgumentList,PyCallByClass
		return QCoreApplication.translate('ctbb_treballs_jardineria', message)


	def add_action(
		self,
		icon_path,
		text,
		callback,
		enabled_flag=True,
		add_to_menu=True,
		add_to_toolbar=True,
		status_tip=None,
		whats_this=None,
		parent=None):
		"""Add a toolbar icon to the toolbar.

		:param icon_path: Path to the icon for this action. Can be a resource
			path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
		:type icon_path: str

		:param text: Text that should be shown in menu items for this action.
		:type text: str

		:param callback: Function to be called when the action is triggered.
		:type callback: function

		:param enabled_flag: A flag indicating if the action should be enabled
			by default. Defaults to True.
		:type enabled_flag: bool

		:param add_to_menu: Flag indicating whether the action should also
			be added to the menu. Defaults to True.
		:type add_to_menu: bool

		:param add_to_toolbar: Flag indicating whether the action should also
			be added to the toolbar. Defaults to True.
		:type add_to_toolbar: bool

		:param status_tip: Optional text to show in a popup when mouse pointer
			hovers over the action.
		:type status_tip: str

		:param parent: Parent widget for the new action. Defaults None.
		:type parent: QWidget

		:param whats_this: Optional text to show in the status bar when the
			mouse pointer hovers over the action.

		:returns: The action that was created. Note that the action is also
			added to self.actions list.
		:rtype: QAction
		"""

		icon = QIcon(icon_path)
		action = QAction(icon, text, parent)
		action.triggered.connect(callback)
		action.setEnabled(enabled_flag)

		if status_tip is not None:
			action.setStatusTip(status_tip)

		if whats_this is not None:
			action.setWhatsThis(whats_this)

		if add_to_toolbar:
			# Adds plugin icon to Plugins toolbar
			self.iface.addToolBarIcon(action)

		if add_to_menu:
			self.iface.addPluginToMenu(
				self.menu,
				action)

		self.actions.append(action)

		return action

	def initGui(self):
		"""Create the menu entries and toolbar icons inside the QGIS GUI."""

		icon_path = ':/plugins/ctbb_treballs_jardineria/icon.png'
		self.add_action(
			icon_path,
			text=self.tr(u'Obrir incidencia'),
			callback=self.run,
			parent=self.iface.mainWindow())

		# will be set False in run()
		self.first_start = True


	def unload(self):
		"""Removes the plugin menu item and icon from QGIS GUI."""
		for action in self.actions:
			self.iface.removePluginMenu(
				self.tr(u'&CTBB Treballs Jardineria'),
				action)
			self.iface.removeToolBarIcon(action)


	def load_dicts(self):
		""" Load dicts for GUI """

		# connect to database
		self.ctbb_db = ctbb_database(self.plugin_dir)
		self.ctbb_db.read_config()
		self.db = self.ctbb_db.open_database()

		for table in DICT_TABLES:
			print(table)

			schema = self.ctbb_db.param["schema"]
			#table = "dic_ambit"
			sql = f"SELECT * FROM {schema}.{table}"
			rows = self.ctbb_db.get_rows(sql)
			self.fill_combo_dicts(table, rows)


	def fill_combo_dicts(self, table, rows):
		""" Fill combo boxes with rows loaded from dicts """

		combo = table[4:]
		widget = self.dlg.findChild(QComboBox, combo)
		widget.addItem("(Seleccionar)")
		for row in rows:
			widget.addItem(row[1])


	def show_selected_trees(self):
		""" Show selected trees in table view """
		
		self.model = QSqlTableModel(db=self.db)
		#schema = self.ctbb_db.param["schema"]
		#table = self.ctbb_db.param["table"]
		schema = "jardineria"
		table = "arbres"
		self.model.setTable(f"{schema}.{table}")
		self.model.setSort(3, Qt.AscendingOrder)
		self.dlg.tbl_main.setModel(self.model)
		self.model.select()
		
		# hide columns
		for i in range(self.model.columnCount()):
			fieldname = self.model.headerData(i, Qt.Horizontal)
			if fieldname not in ARBRES_TABLE_FIELDS:
				self.dlg.tbl_main.setColumnHidden(i, True)
		
		# set column width
		fieldindex = self.model.fieldIndex('esp_nom')
		self.dlg.tbl_main.setColumnWidth(fieldindex, 300)


	def show_selected_features(self, layer, features):
		""" Show selected trees or superficies in table view """
		
		print(len(features))
		for feature in features:
			print(feature.attributes())

		#self.tableView = QgsAttributeTableView(self)
		self.layerCache = QgsVectorLayerCache(layer, len(features))
		self.tableModel = QgsAttributeTableModel(self.layerCache)
		self.tableModel.loadLayer()

		self.tableFilterModel = QgsAttributeTableFilterModel(self.iface.mapCanvas(), self.tableModel, parent=self.tableModel)
		self.tableFilterModel.setFilterMode(QgsAttributeTableFilterModel.ShowSelected)
		self.dlg.tbl_main.setModel(self.tableFilterModel)


	def run(self):
		"""Run method that performs all the real work"""
		
		# get selected features
		layer = self.iface.activeLayer()
		features = layer.selectedFeatures()
		
		if len(features) < 1:
			self.iface.messageBar().pushMessage("Warning", "Has de seleccionar al menys un abre o superficie", level=Qgis.Warning, duration=5)
			return
		
		# Create the dialog with elements (after translation) and keep reference
		# Only create GUI ONCE in callback, so that it will only load when the plugin is started
		if self.first_start == True:
			self.first_start = False
			self.dlg = ctbb_treballs_jardineriaDialog()

		# load dicts
		self.load_dicts()

		# show the dialog
		self.dlg.show()
		self.show_selected_features(layer, features)
		
		# Run the dialog event loop
		result = self.dlg.exec_()
		# See if OK was pressed
		if result:
			pass